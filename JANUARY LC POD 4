problem link : https://leetcode.com/problems/unique-length-3-palindromic-subsequences
solution : #include <stdio.h>
#include <string.h>
#include <stdbool.h>

int countPalindromicSubsequence(char* s) {
    int R[26] = {0};
    int L[26] = {0};
    int result = 0;
    int len = strlen(s);
    // Calculate the frequency of each character in the string
    for (int i = 0; i < len; i++) {
        R[s[i] - 'a']++;
    }

    // A set-like array to track unique subsequences
    bool S[26 * 26] = {false};

    // Traverse the string and find all valid palindromic subsequences
    for (int i = 0; i < len; i++) {
        int t = s[i] - 'a';
        R[t]--;
        // Check for valid palindromic subsequences
        for (int j = 0; j < 26; j++) {
            if (L[j] > 0 && R[j] > 0) {
                S[26 * t + j] = true;
            }
        }
        L[t]++;
    }

    // Count unique palindromic subsequences
    for (int i = 0; i < 26 * 26; i++) {
        if (S[i]) {
            result++;
        }
    }

    return result;
}
